console.log("Contact form script loaded");document.addEventListener("DOMContentLoaded",function(){console.log("DOM loaded, initializing form handler");const contactForm=document.getElementById("contactForm");if(!contactForm){console.error("Contact form element not found!");return}console.log("Contact form found:",contactForm);const formGroups=contactForm.querySelectorAll(".form-group");console.log("Form groups found:",formGroups.length);const patterns={name:/^[a-zA-Z\s]{2,50}$/,email:/^[^\s@]+@[^\s@]+\.[^\s@]+$/,phone:/^(\+61|0)[0-9]{9}$/,subject:/^.{3,100}$/,message:/^.{10,1000}$/};const errorMessages={name:"Please enter a valid name (2-50 characters, letters only)",email:"Please enter a valid email address",phone:"Please enter a valid Australian phone number",subject:"Please enter a subject (3-100 characters)",message:"Please enter a message (10-1000 characters)"};formGroups.forEach(group=>{const errorDiv=document.createElement("div");errorDiv.className="error-message";group.appendChild(errorDiv)});formGroups.forEach(group=>{const input=group.querySelector("input, textarea, select");const errorDiv=group.querySelector(".error-message");if(input){input.addEventListener("input",function(){validateField(input,errorDiv)});input.addEventListener("blur",function(){validateField(input,errorDiv)})}});function validateField(input,errorDiv){const fieldName=input.id;const value=input.value.trim();errorDiv.textContent="";input.classList.remove("error");if(fieldName==="phone"&&value===""){return true}if(input.required&&value===""){showError(input,errorDiv,"This field is required");return false}if(fieldName==="service"&&value===""){showError(input,errorDiv,"Please select a service");return false}if(patterns[fieldName]&&!patterns[fieldName].test(value)){showError(input,errorDiv,errorMessages[fieldName]);return false}return true}function showError(input,errorDiv,message){errorDiv.textContent=message;input.classList.add("error")}console.log("Adding submit event listener to the form");contactForm.addEventListener("submit",function(e){console.log("Form submit event triggered");e.preventDefault();console.log("Default form submission prevented");let isValid=true;formGroups.forEach(group=>{const input=group.querySelector("input, textarea, select");const errorDiv=group.querySelector(".error-message");if(input&&!validateField(input,errorDiv)){isValid=false}});if(!isValid){console.log("Form validation failed");return}console.log("Form validation passed, proceeding with submission");const submitButton=contactForm.querySelector(".submit-button");const originalButtonText=submitButton.textContent;submitButton.textContent="Sending...";submitButton.disabled=true;const formData=new FormData(contactForm);const formValues={};for(const[key,value]of formData.entries()){formValues[key]=value}console.log("Form data collected:",formValues);setTimeout(function(){console.log("Form submission simulation complete");showFormMessage("success","Thank you for your message. We will get back to you soon!");contactForm.reset();submitButton.textContent=originalButtonText;submitButton.disabled=false},1500)});function showFormMessage(type,message){console.log("Showing form message:",type,message);const messageDiv=document.createElement("div");messageDiv.className=`form-message ${type}`;messageDiv.setAttribute("role","alert");messageDiv.setAttribute("aria-live","polite");messageDiv.textContent=message;const existingMessage=contactForm.querySelector(".form-message");if(existingMessage){existingMessage.remove()}contactForm.insertBefore(messageDiv,contactForm.firstChild);setTimeout(()=>{messageDiv.remove()},5e3)}console.log("Form handler initialization complete")});console.log("Contact form script loaded");document.addEventListener("DOMContentLoaded",function(){console.log("DOM loaded, initializing form handler");const contactForm=document.getElementById("contactForm");if(!contactForm){console.error("Contact form element not found!");return}console.log("Contact form found:",contactForm);const formGroups=contactForm.querySelectorAll(".form-group");console.log("Form groups found:",formGroups.length);const patterns={name:/^[a-zA-Z\s]{2,50}$/,email:/^[^\s@]+@[^\s@]+\.[^\s@]+$/,phone:/^(\+61|0)[0-9]{9}$/,subject:/^.{3,100}$/,message:/^.{10,1000}$/};const errorMessages={name:"Please enter a valid name (2-50 characters, letters only)",email:"Please enter a valid email address",phone:"Please enter a valid Australian phone number",subject:"Please enter a subject (3-100 characters)",message:"Please enter a message (10-1000 characters)"};formGroups.forEach(group=>{const errorDiv=document.createElement("div");errorDiv.className="error-message";group.appendChild(errorDiv)});formGroups.forEach(group=>{const input=group.querySelector("input, textarea, select");const errorDiv=group.querySelector(".error-message");if(input){input.addEventListener("input",function(){validateField(input,errorDiv)});input.addEventListener("blur",function(){validateField(input,errorDiv)})}});function validateField(input,errorDiv){const fieldName=input.id;const value=input.value.trim();errorDiv.textContent="";input.classList.remove("error");if(fieldName==="phone"&&value===""){return true}if(input.required&&value===""){showError(input,errorDiv,"This field is required");return false}if(fieldName==="service"&&value===""){showError(input,errorDiv,"Please select a service");return false}if(patterns[fieldName]&&!patterns[fieldName].test(value)){showError(input,errorDiv,errorMessages[fieldName]);return false}return true}function showError(input,errorDiv,message){errorDiv.textContent=message;input.classList.add("error")}console.log("Adding submit event listener to the form");contactForm.addEventListener("submit",function(e){console.log("Form submit event triggered");e.preventDefault();console.log("Default form submission prevented");let isValid=true;formGroups.forEach(group=>{const input=group.querySelector("input, textarea, select");const errorDiv=group.querySelector(".error-message");if(input&&!validateField(input,errorDiv)){isValid=false}});if(!isValid){console.log("Form validation failed");return}console.log("Form validation passed, proceeding with submission");const submitButton=contactForm.querySelector(".submit-button");const originalButtonText=submitButton.textContent;submitButton.textContent="Sending...";submitButton.disabled=true;const formData=new FormData(contactForm);const formValues={};for(const[key,value]of formData.entries()){formValues[key]=value}console.log("Form data collected:",formValues);setTimeout(function(){console.log("Form submission simulation complete");showFormMessage("success","Thank you for your message. We will get back to you soon!");contactForm.reset();submitButton.textContent=originalButtonText;submitButton.disabled=false},1500)});function showFormMessage(type,message){console.log("Showing form message:",type,message);const messageDiv=document.createElement("div");messageDiv.className=`form-message ${type}`;messageDiv.setAttribute("role","alert");messageDiv.setAttribute("aria-live","polite");messageDiv.textContent=message;const existingMessage=contactForm.querySelector(".form-message");if(existingMessage){existingMessage.remove()}contactForm.insertBefore(messageDiv,contactForm.firstChild);setTimeout(()=>{messageDiv.remove()},5e3)}console.log("Form handler initialization complete")});console.log("Contact form script loaded");document.addEventListener("DOMContentLoaded",function(){console.log("DOM loaded, initializing form handler");const contactForm=document.getElementById("contactForm");if(!contactForm){console.error("Contact form element not found!");return}console.log("Contact form found:",contactForm);const formGroups=contactForm.querySelectorAll(".form-group");console.log("Form groups found:",formGroups.length);const patterns={name:/^[a-zA-Z\s]{2,50}$/,email:/^[^\s@]+@[^\s@]+\.[^\s@]+$/,phone:/^(\+61|0)[0-9]{9}$/,subject:/^.{3,100}$/,message:/^.{10,1000}$/};const errorMessages={name:"Please enter a valid name (2-50 characters, letters only)",email:"Please enter a valid email address",phone:"Please enter a valid Australian phone number",subject:"Please enter a subject (3-100 characters)",message:"Please enter a message (10-1000 characters)"};formGroups.forEach(group=>{const errorDiv=document.createElement("div");errorDiv.className="error-message";group.appendChild(errorDiv)});formGroups.forEach(group=>{const input=group.querySelector("input, textarea, select");const errorDiv=group.querySelector(".error-message");if(input){input.addEventListener("input",function(){validateField(input,errorDiv)});input.addEventListener("blur",function(){validateField(input,errorDiv)})}});function validateField(input,errorDiv){const fieldName=input.id;const value=input.value.trim();errorDiv.textContent="";input.classList.remove("error");if(fieldName==="phone"&&value===""){return true}if(input.required&&value===""){showError(input,errorDiv,"This field is required");return false}if(fieldName==="service"&&value===""){showError(input,errorDiv,"Please select a service");return false}if(patterns[fieldName]&&!patterns[fieldName].test(value)){showError(input,errorDiv,errorMessages[fieldName]);return false}return true}function showError(input,errorDiv,message){errorDiv.textContent=message;input.classList.add("error")}console.log("Adding submit event listener to the form");contactForm.addEventListener("submit",function(e){console.log("Form submit event triggered");e.preventDefault();console.log("Default form submission prevented");let isValid=true;formGroups.forEach(group=>{const input=group.querySelector("input, textarea, select");const errorDiv=group.querySelector(".error-message");if(input&&!validateField(input,errorDiv)){isValid=false}});if(!isValid){console.log("Form validation failed");return}console.log("Form validation passed, proceeding with submission");const submitButton=contactForm.querySelector(".submit-button");const originalButtonText=submitButton.textContent;submitButton.textContent="Sending...";submitButton.disabled=true;const formData=new FormData(contactForm);const formValues={};for(const[key,value]of formData.entries()){formValues[key]=value}console.log("Form data collected:",formValues);setTimeout(function(){console.log("Form submission simulation complete");showFormMessage("success","Thank you for your message. We will get back to you soon!");contactForm.reset();submitButton.textContent=originalButtonText;submitButton.disabled=false},1500)});function showFormMessage(type,message){console.log("Showing form message:",type,message);const messageDiv=document.createElement("div");messageDiv.className=`form-message ${type}`;messageDiv.setAttribute("role","alert");messageDiv.setAttribute("aria-live","polite");messageDiv.textContent=message;const existingMessage=contactForm.querySelector(".form-message");if(existingMessage){existingMessage.remove()}contactForm.insertBefore(messageDiv,contactForm.firstChild);setTimeout(()=>{messageDiv.remove()},5e3)}console.log("Form handler initialization complete")});